<?php

namespace pagopa\methods\req;

use pagopa\crawler\methods\req\pspInviaCarrelloRPTCarte;
use PHPUnit\Framework\Attributes\TestDox;
use PHPUnit\Framework\TestCase;

#[TestDox('methods\req\pspInviaCarrelloRPTCarteTest::class')]
class pspInviaCarrelloRPTCarteTest extends TestCase
{


    protected pspInviaCarrelloRPTCarte $instance_1_RPT;

    protected pspInviaCarrelloRPTCarte $instance_2_RPT;


    protected pspInviaCarrelloRPTCarte $instance_3_RPT;

    public function setUp(): void
    {
        $this->instance_1_RPT = new pspInviaCarrelloRPTCarte(base64_decode('PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIiA/Pgo8c29hcGVudjpFbnZlbG9wZSB4bWxuczpwYXlfaj0iaHR0cDovL3d3dy5jbmlwYS5nb3YuaXQvc2NoZW1hcy8yMDEwL1BhZ2FtZW50aS9BY2tfMV8wLyIgeG1sbnM6cHB0PSJodHRwOi8vd3MucGFnYW1lbnRpLnRlbGVtYXRpY2kuZ292LyIgeG1sbnM6c29hcGVudj0iaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvc29hcC9lbnZlbG9wZS8iIHhtbG5zOnRucz0iaHR0cDovL1B1bnRvQWNjZXNzb1BTUC5zcGNvb3AuZ292Lml0IiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIj4KCTxzb2FwZW52OkJvZHk+CgkJPHBwdDpwc3BJbnZpYUNhcnJlbGxvUlBUQ2FydGU+CgkJCTxpZGVudGlmaWNhdGl2b1BTUD5QU1BfVEVTVF8wMTwvaWRlbnRpZmljYXRpdm9QU1A+CgkJCTxpZGVudGlmaWNhdGl2b0ludGVybWVkaWFyaW9QU1A+ODg4ODg4ODg4ODg8L2lkZW50aWZpY2F0aXZvSW50ZXJtZWRpYXJpb1BTUD4KCQkJPGlkZW50aWZpY2F0aXZvQ2FuYWxlPjg4ODg4ODg4ODg4XzAxPC9pZGVudGlmaWNhdGl2b0NhbmFsZT4KCQkJPG1vZGVsbG9QYWdhbWVudG8+MTwvbW9kZWxsb1BhZ2FtZW50bz4KCQkJPHBhcmFtZXRyaVByb2ZpbG9QYWdhbWVudG8+eHh4eHg8L3BhcmFtZXRyaVByb2ZpbG9QYWdhbWVudG8+CgkJCTxsaXN0YVJQVD4KCQkJCTxlbGVtZW50b0xpc3RhQ2FycmVsbG9SUFQ+CgkJCQkJPGlkZW50aWZpY2F0aXZvRG9taW5pbz43Nzc3Nzc3Nzc3NzwvaWRlbnRpZmljYXRpdm9Eb21pbmlvPgoJCQkJCTxpZGVudGlmaWNhdGl2b1VuaXZvY29WZXJzYW1lbnRvPjAwMDAwMDAwMDAwMDAwMDAyMDwvaWRlbnRpZmljYXRpdm9Vbml2b2NvVmVyc2FtZW50bz4KCQkJCQk8Y29kaWNlQ29udGVzdG9QYWdhbWVudG8+dDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMjA8L2NvZGljZUNvbnRlc3RvUGFnYW1lbnRvPgoJCQkJCTxycHQ+UEZKUVZDQjRiV3h1Y3owaWFIUjBjRG92TDNkM2R5NWthV2RwZEhCaExtZHZkaTVwZEM5elkyaGxiV0Z6THpJd01URXZVR0ZuWVcxbGJuUnBMeUkrQ2lBZ0lDQThkbVZ5YzJsdmJtVlBaMmRsZEhSdlBqRThMM1psY25OcGIyNWxUMmRuWlhSMGJ6NEtJQ0FnSUR4a2IyMXBibWx2UGdvZ0lDQWdJQ0FnSUR4cFpHVnVkR2xtYVdOaGRHbDJiMFJ2YldsdWFXOCtOemMzTnpjM056YzNOemM4TDJsa1pXNTBhV1pwWTJGMGFYWnZSRzl0YVc1cGJ6NEtJQ0FnSUNBZ0lDQThhV1JsYm5ScFptbGpZWFJwZG05VGRHRjZhVzl1WlZKcFkyaHBaV1JsYm5SbFBqYzNOemMzTnpjM056YzNYekF4UEM5cFpHVnVkR2xtYVdOaGRHbDJiMU4wWVhwcGIyNWxVbWxqYUdsbFpHVnVkR1UrQ2lBZ0lDQThMMlJ2YldsdWFXOCtDaUFnSUNBOGFXUmxiblJwWm1sallYUnBkbTlOWlhOellXZG5hVzlTYVdOb2FXVnpkR0UrZUhoNGVIaDRQQzlwWkdWdWRHbG1hV05oZEdsMmIwMWxjM05oWjJkcGIxSnBZMmhwWlhOMFlUNEtJQ0FnSUR4a1lYUmhUM0poVFdWemMyRm5aMmx2VW1samFHbGxjM1JoUGpJd01qUXRNRFF0TVRCVU1qRTZNVEk2TWpJdU5qZzBLekF5T2pBd1BDOWtZWFJoVDNKaFRXVnpjMkZuWjJsdlVtbGphR2xsYzNSaFBnb2dJQ0FnUEdGMWRHVnVkR2xqWVhwcGIyNWxVMjluWjJWMGRHOCtUaTlCUEM5aGRYUmxiblJwWTJGNmFXOXVaVk52WjJkbGRIUnZQZ29nSUNBZ1BITnZaMmRsZEhSdlZtVnljMkZ1ZEdVK0NpQWdJQ0FnSUNBZ1BHbGtaVzUwYVdacFkyRjBhWFp2Vlc1cGRtOWpiMVpsY25OaGJuUmxQZ29nSUNBZ0lDQWdJQ0FnSUNBOGRHbHdiMGxrWlc1MGFXWnBZMkYwYVhadlZXNXBkbTlqYno1R1BDOTBhWEJ2U1dSbGJuUnBabWxqWVhScGRtOVZibWwyYjJOdlBnb2dJQ0FnSUNBZ0lDQWdJQ0E4WTI5a2FXTmxTV1JsYm5ScFptbGpZWFJwZG05VmJtbDJiMk52UG5oNGVIaDRQQzlqYjJScFkyVkpaR1Z1ZEdsbWFXTmhkR2wyYjFWdWFYWnZZMjgrQ2lBZ0lDQWdJQ0FnUEM5cFpHVnVkR2xtYVdOaGRHbDJiMVZ1YVhadlkyOVdaWEp6WVc1MFpUNEtJQ0FnSUNBZ0lDQThZVzVoWjNKaFptbGpZVlpsY25OaGJuUmxQbmg0ZUhoNFBDOWhibUZuY21GbWFXTmhWbVZ5YzJGdWRHVStDaUFnSUNBZ0lDQWdQR2x1WkdseWFYcDZiMVpsY25OaGJuUmxQbmg0ZUhoNGVEd3ZhVzVrYVhKcGVucHZWbVZ5YzJGdWRHVStDaUFnSUNBZ0lDQWdQR05wZG1samIxWmxjbk5oYm5SbFBuaDRlSGc4TDJOcGRtbGpiMVpsY25OaGJuUmxQZ29nSUNBZ0lDQWdJRHhqWVhCV1pYSnpZVzUwWlQ1NGVIaDRQQzlqWVhCV1pYSnpZVzUwWlQ0S0lDQWdJQ0FnSUNBOGJHOWpZV3hwZEdGV1pYSnpZVzUwWlQ1NGVIaDRQQzlzYjJOaGJHbDBZVlpsY25OaGJuUmxQZ29nSUNBZ0lDQWdJRHh3Y205MmFXNWphV0ZXWlhKellXNTBaVDU0ZUhoNGVEd3ZjSEp2ZG1sdVkybGhWbVZ5YzJGdWRHVStDaUFnSUNBZ0lDQWdQR1V0YldGcGJGWmxjbk5oYm5SbFBuaDRlSGhBZUhoNGVDNTRlSGc4TDJVdGJXRnBiRlpsY25OaGJuUmxQZ29nSUNBZ1BDOXpiMmRuWlhSMGIxWmxjbk5oYm5SbFBnb2dJQ0FnUEhOdloyZGxkSFJ2VUdGbllYUnZjbVUrQ2lBZ0lDQWdJQ0FnUEdsa1pXNTBhV1pwWTJGMGFYWnZWVzVwZG05amIxQmhaMkYwYjNKbFBnb2dJQ0FnSUNBZ0lDQWdJQ0E4ZEdsd2IwbGtaVzUwYVdacFkyRjBhWFp2Vlc1cGRtOWpiejVHUEM5MGFYQnZTV1JsYm5ScFptbGpZWFJwZG05VmJtbDJiMk52UGdvZ0lDQWdJQ0FnSUNBZ0lDQThZMjlrYVdObFNXUmxiblJwWm1sallYUnBkbTlWYm1sMmIyTnZQbmg0ZUhoNGVIZzhMMk52WkdsalpVbGtaVzUwYVdacFkyRjBhWFp2Vlc1cGRtOWpiejRLSUNBZ0lDQWdJQ0E4TDJsa1pXNTBhV1pwWTJGMGFYWnZWVzVwZG05amIxQmhaMkYwYjNKbFBnb2dJQ0FnSUNBZ0lEeGhibUZuY21GbWFXTmhVR0ZuWVhSdmNtVStlSGg0ZUhnOEwyRnVZV2R5WVdacFkyRlFZV2RoZEc5eVpUNEtJQ0FnSUR3dmMyOW5aMlYwZEc5UVlXZGhkRzl5WlQ0S0lDQWdJRHhsYm5SbFFtVnVaV1pwWTJsaGNtbHZQZ29nSUNBZ0lDQWdJRHhwWkdWdWRHbG1hV05oZEdsMmIxVnVhWFp2WTI5Q1pXNWxabWxqYVdGeWFXOCtDaUFnSUNBZ0lDQWdJQ0FnSUR4MGFYQnZTV1JsYm5ScFptbGpZWFJwZG05VmJtbDJiMk52UGtjOEwzUnBjRzlKWkdWdWRHbG1hV05oZEdsMmIxVnVhWFp2WTI4K0NpQWdJQ0FnSUNBZ0lDQWdJRHhqYjJScFkyVkpaR1Z1ZEdsbWFXTmhkR2wyYjFWdWFYWnZZMjgrTnpjM056YzNOemMzTnpjOEwyTnZaR2xqWlVsa1pXNTBhV1pwWTJGMGFYWnZWVzVwZG05amJ6NEtJQ0FnSUNBZ0lDQThMMmxrWlc1MGFXWnBZMkYwYVhadlZXNXBkbTlqYjBKbGJtVm1hV05wWVhKcGJ6NEtJQ0FnSUNBZ0lDQThaR1Z1YjIxcGJtRjZhVzl1WlVKbGJtVm1hV05wWVhKcGJ6NTRlSGg0ZUhnOEwyUmxibTl0YVc1aGVtbHZibVZDWlc1bFptbGphV0Z5YVc4K0NpQWdJQ0FnSUNBZ1BHbHVaR2x5YVhwNmIwSmxibVZtYVdOcFlYSnBiejU0ZUhoNGVEd3ZhVzVrYVhKcGVucHZRbVZ1WldacFkybGhjbWx2UGdvZ0lDQWdJQ0FnSUR4amFYWnBZMjlDWlc1bFptbGphV0Z5YVc4K2VIaDRlRHd2WTJsMmFXTnZRbVZ1WldacFkybGhjbWx2UGdvZ0lDQWdJQ0FnSUR4allYQkNaVzVsWm1samFXRnlhVzgrTURBd01EQThMMk5oY0VKbGJtVm1hV05wWVhKcGJ6NEtJQ0FnSUNBZ0lDQThiRzlqWVd4cGRHRkNaVzVsWm1samFXRnlhVzgrZUhoNGVEd3ZiRzlqWVd4cGRHRkNaVzVsWm1samFXRnlhVzgrQ2lBZ0lDQWdJQ0FnUEhCeWIzWnBibU5wWVVKbGJtVm1hV05wWVhKcGJ6NTRlRHd2Y0hKdmRtbHVZMmxoUW1WdVpXWnBZMmxoY21sdlBnb2dJQ0FnSUNBZ0lEeHVZWHBwYjI1bFFtVnVaV1pwWTJsaGNtbHZQbmg0UEM5dVlYcHBiMjVsUW1WdVpXWnBZMmxoY21sdlBnb2dJQ0FnUEM5bGJuUmxRbVZ1WldacFkybGhjbWx2UGdvZ0lDQWdQR1JoZEdsV1pYSnpZVzFsYm5SdlBnb2dJQ0FnSUNBZ0lEeGtZWFJoUlhObFkzVjZhVzl1WlZCaFoyRnRaVzUwYno0eU1ESTBMVEEwTFRFd1BDOWtZWFJoUlhObFkzVjZhVzl1WlZCaFoyRnRaVzUwYno0S0lDQWdJQ0FnSUNBOGFXMXdiM0owYjFSdmRHRnNaVVJoVm1WeWMyRnlaVDQ1TUM0d01Ed3ZhVzF3YjNKMGIxUnZkR0ZzWlVSaFZtVnljMkZ5WlQ0S0lDQWdJQ0FnSUNBOGRHbHdiMVpsY25OaGJXVnVkRzgrUTFBOEwzUnBjRzlXWlhKellXMWxiblJ2UGdvZ0lDQWdJQ0FnSUR4cFpHVnVkR2xtYVdOaGRHbDJiMVZ1YVhadlkyOVdaWEp6WVcxbGJuUnZQakF3TURBd01EQXdNREF3TURBd01EQXlNRHd2YVdSbGJuUnBabWxqWVhScGRtOVZibWwyYjJOdlZtVnljMkZ0Wlc1MGJ6NEtJQ0FnSUNBZ0lDQThZMjlrYVdObFEyOXVkR1Z6ZEc5UVlXZGhiV1Z1ZEc4K2REQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TWpBOEwyTnZaR2xqWlVOdmJuUmxjM1J2VUdGbllXMWxiblJ2UGdvZ0lDQWdJQ0FnSUR4bWFYSnRZVkpwWTJWMmRYUmhQakE4TDJacGNtMWhVbWxqWlhaMWRHRStDaUFnSUNBZ0lDQWdQR1JoZEdsVGFXNW5iMnh2Vm1WeWMyRnRaVzUwYno0S0lDQWdJQ0FnSUNBZ0lDQWdQR2x0Y0c5eWRHOVRhVzVuYjJ4dlZtVnljMkZ0Wlc1MGJ6NDVNQzR3TUR3dmFXMXdiM0owYjFOcGJtZHZiRzlXWlhKellXMWxiblJ2UGdvZ0lDQWdJQ0FnSUNBZ0lDQThhV0poYmtGalkzSmxaR2wwYno1SlZEQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURFOEwybGlZVzVCWTJOeVpXUnBkRzgrQ2lBZ0lDQWdJQ0FnSUNBZ0lEeGlhV05CWTJOeVpXUnBkRzgrZUhoNGVIaDRlSGc4TDJKcFkwRmpZM0psWkdsMGJ6NEtJQ0FnSUNBZ0lDQWdJQ0FnUEdOaGRYTmhiR1ZXWlhKellXMWxiblJ2UG5oNGVIaDRlSGg0ZUR3dlkyRjFjMkZzWlZabGNuTmhiV1Z1ZEc4K0NpQWdJQ0FnSUNBZ0lDQWdJRHhrWVhScFUzQmxZMmxtYVdOcFVtbHpZMjl6YzJsdmJtVStlSGg0ZUhnOEwyUmhkR2xUY0dWamFXWnBZMmxTYVhOamIzTnphVzl1WlQ0S0lDQWdJQ0FnSUNBOEwyUmhkR2xUYVc1bmIyeHZWbVZ5YzJGdFpXNTBiejRLSUNBZ0lEd3ZaR0YwYVZabGNuTmhiV1Z1ZEc4K0Nqd3ZVbEJVUGc9PTwvcnB0PgoJCQkJPC9lbGVtZW50b0xpc3RhQ2FycmVsbG9SUFQ+CgkJCTwvbGlzdGFSUFQ+CgkJCTxycm4+MDAwMDAwMDAwMDAxPC9ycm4+CgkJCTxlc2l0b1RyYW5zYXppb25lQ2FydGE+MDA8L2VzaXRvVHJhbnNhemlvbmVDYXJ0YT4KCQkJPGltcG9ydG9Ub3RhbGVQYWdhdG8+OTEuMDA8L2ltcG9ydG9Ub3RhbGVQYWdhdG8+CgkJCTx0aW1lc3RhbXBPcGVyYXppb25lPjIwMjQtMDQtMTBUMjE6MTQ6NDguOTE0KzAyOjAwPC90aW1lc3RhbXBPcGVyYXppb25lPgoJCQk8Y29kaWNlQXV0b3JpenphdGl2bz4wMDAwMDE8L2NvZGljZUF1dG9yaXp6YXRpdm8+CgkJPC9wcHQ6cHNwSW52aWFDYXJyZWxsb1JQVENhcnRlPgoJPC9zb2FwZW52OkJvZHk+Cjwvc29hcGVudjpFbnZlbG9wZT4='));
        $this->instance_2_RPT = new pspInviaCarrelloRPTCarte(base64_decode('PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIiA/Pgo8c29hcGVudjpFbnZlbG9wZSB4bWxuczpwYXlfaj0iaHR0cDovL3d3dy5jbmlwYS5nb3YuaXQvc2NoZW1hcy8yMDEwL1BhZ2FtZW50aS9BY2tfMV8wLyIgeG1sbnM6cHB0PSJodHRwOi8vd3MucGFnYW1lbnRpLnRlbGVtYXRpY2kuZ292LyIgeG1sbnM6c29hcGVudj0iaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvc29hcC9lbnZlbG9wZS8iIHhtbG5zOnRucz0iaHR0cDovL1B1bnRvQWNjZXNzb1BTUC5zcGNvb3AuZ292Lml0IiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIj4KCTxzb2FwZW52OkJvZHk+CgkJPHBwdDpwc3BJbnZpYUNhcnJlbGxvUlBUQ2FydGU+CgkJCTxpZGVudGlmaWNhdGl2b1BTUD5QU1BfVEVTVF8wMTwvaWRlbnRpZmljYXRpdm9QU1A+CgkJCTxpZGVudGlmaWNhdGl2b0ludGVybWVkaWFyaW9QU1A+ODg4ODg4ODg4ODg8L2lkZW50aWZpY2F0aXZvSW50ZXJtZWRpYXJpb1BTUD4KCQkJPGlkZW50aWZpY2F0aXZvQ2FuYWxlPjg4ODg4ODg4ODg4XzAxPC9pZGVudGlmaWNhdGl2b0NhbmFsZT4KCQkJPG1vZGVsbG9QYWdhbWVudG8+MTwvbW9kZWxsb1BhZ2FtZW50bz4KCQkJPHBhcmFtZXRyaVByb2ZpbG9QYWdhbWVudG8+eHh4eHg8L3BhcmFtZXRyaVByb2ZpbG9QYWdhbWVudG8+CgkJCTxsaXN0YVJQVD4KCQkJCTxlbGVtZW50b0xpc3RhQ2FycmVsbG9SUFQ+CgkJCQkJPGlkZW50aWZpY2F0aXZvRG9taW5pbz43Nzc3Nzc3Nzc3NzwvaWRlbnRpZmljYXRpdm9Eb21pbmlvPgoJCQkJCTxpZGVudGlmaWNhdGl2b1VuaXZvY29WZXJzYW1lbnRvPjAwMDAwMDAwMDAwMDAwMDAyMTwvaWRlbnRpZmljYXRpdm9Vbml2b2NvVmVyc2FtZW50bz4KCQkJCQk8Y29kaWNlQ29udGVzdG9QYWdhbWVudG8+dDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMjE8L2NvZGljZUNvbnRlc3RvUGFnYW1lbnRvPgoJCQkJCTxycHQ+UEZKUVZDQjRiV3h1Y3owaWFIUjBjRG92TDNkM2R5NWthV2RwZEhCaExtZHZkaTVwZEM5elkyaGxiV0Z6THpJd01URXZVR0ZuWVcxbGJuUnBMeUkrQ2lBZ0lDQThkbVZ5YzJsdmJtVlBaMmRsZEhSdlBqRThMM1psY25OcGIyNWxUMmRuWlhSMGJ6NEtJQ0FnSUR4a2IyMXBibWx2UGdvZ0lDQWdJQ0FnSUR4cFpHVnVkR2xtYVdOaGRHbDJiMFJ2YldsdWFXOCtOemMzTnpjM056YzNOemM4TDJsa1pXNTBhV1pwWTJGMGFYWnZSRzl0YVc1cGJ6NEtJQ0FnSUNBZ0lDQThhV1JsYm5ScFptbGpZWFJwZG05VGRHRjZhVzl1WlZKcFkyaHBaV1JsYm5SbFBqYzNOemMzTnpjM056YzNYekF4UEM5cFpHVnVkR2xtYVdOaGRHbDJiMU4wWVhwcGIyNWxVbWxqYUdsbFpHVnVkR1UrQ2lBZ0lDQThMMlJ2YldsdWFXOCtDaUFnSUNBOGFXUmxiblJwWm1sallYUnBkbTlOWlhOellXZG5hVzlTYVdOb2FXVnpkR0UrZUhoNGVIaDRQQzlwWkdWdWRHbG1hV05oZEdsMmIwMWxjM05oWjJkcGIxSnBZMmhwWlhOMFlUNEtJQ0FnSUR4a1lYUmhUM0poVFdWemMyRm5aMmx2VW1samFHbGxjM1JoUGpJd01qUXRNRFF0TVRCVU1qRTZNVEk2TWpJdU5qZzBLekF5T2pBd1BDOWtZWFJoVDNKaFRXVnpjMkZuWjJsdlVtbGphR2xsYzNSaFBnb2dJQ0FnUEdGMWRHVnVkR2xqWVhwcGIyNWxVMjluWjJWMGRHOCtUaTlCUEM5aGRYUmxiblJwWTJGNmFXOXVaVk52WjJkbGRIUnZQZ29nSUNBZ1BITnZaMmRsZEhSdlZtVnljMkZ1ZEdVK0NpQWdJQ0FnSUNBZ1BHbGtaVzUwYVdacFkyRjBhWFp2Vlc1cGRtOWpiMVpsY25OaGJuUmxQZ29nSUNBZ0lDQWdJQ0FnSUNBOGRHbHdiMGxrWlc1MGFXWnBZMkYwYVhadlZXNXBkbTlqYno1R1BDOTBhWEJ2U1dSbGJuUnBabWxqWVhScGRtOVZibWwyYjJOdlBnb2dJQ0FnSUNBZ0lDQWdJQ0E4WTI5a2FXTmxTV1JsYm5ScFptbGpZWFJwZG05VmJtbDJiMk52UG5oNGVIaDRQQzlqYjJScFkyVkpaR1Z1ZEdsbWFXTmhkR2wyYjFWdWFYWnZZMjgrQ2lBZ0lDQWdJQ0FnUEM5cFpHVnVkR2xtYVdOaGRHbDJiMVZ1YVhadlkyOVdaWEp6WVc1MFpUNEtJQ0FnSUNBZ0lDQThZVzVoWjNKaFptbGpZVlpsY25OaGJuUmxQbmg0ZUhoNFBDOWhibUZuY21GbWFXTmhWbVZ5YzJGdWRHVStDaUFnSUNBZ0lDQWdQR2x1WkdseWFYcDZiMVpsY25OaGJuUmxQbmg0ZUhoNGVEd3ZhVzVrYVhKcGVucHZWbVZ5YzJGdWRHVStDaUFnSUNBZ0lDQWdQR05wZG1samIxWmxjbk5oYm5SbFBuaDRlSGc4TDJOcGRtbGpiMVpsY25OaGJuUmxQZ29nSUNBZ0lDQWdJRHhqWVhCV1pYSnpZVzUwWlQ1NGVIaDRQQzlqWVhCV1pYSnpZVzUwWlQ0S0lDQWdJQ0FnSUNBOGJHOWpZV3hwZEdGV1pYSnpZVzUwWlQ1NGVIaDRQQzlzYjJOaGJHbDBZVlpsY25OaGJuUmxQZ29nSUNBZ0lDQWdJRHh3Y205MmFXNWphV0ZXWlhKellXNTBaVDU0ZUhoNGVEd3ZjSEp2ZG1sdVkybGhWbVZ5YzJGdWRHVStDaUFnSUNBZ0lDQWdQR1V0YldGcGJGWmxjbk5oYm5SbFBuaDRlSGhBZUhoNGVDNTRlSGc4TDJVdGJXRnBiRlpsY25OaGJuUmxQZ29nSUNBZ1BDOXpiMmRuWlhSMGIxWmxjbk5oYm5SbFBnb2dJQ0FnUEhOdloyZGxkSFJ2VUdGbllYUnZjbVUrQ2lBZ0lDQWdJQ0FnUEdsa1pXNTBhV1pwWTJGMGFYWnZWVzVwZG05amIxQmhaMkYwYjNKbFBnb2dJQ0FnSUNBZ0lDQWdJQ0E4ZEdsd2IwbGtaVzUwYVdacFkyRjBhWFp2Vlc1cGRtOWpiejVHUEM5MGFYQnZTV1JsYm5ScFptbGpZWFJwZG05VmJtbDJiMk52UGdvZ0lDQWdJQ0FnSUNBZ0lDQThZMjlrYVdObFNXUmxiblJwWm1sallYUnBkbTlWYm1sMmIyTnZQbmg0ZUhoNGVIZzhMMk52WkdsalpVbGtaVzUwYVdacFkyRjBhWFp2Vlc1cGRtOWpiejRLSUNBZ0lDQWdJQ0E4TDJsa1pXNTBhV1pwWTJGMGFYWnZWVzVwZG05amIxQmhaMkYwYjNKbFBnb2dJQ0FnSUNBZ0lEeGhibUZuY21GbWFXTmhVR0ZuWVhSdmNtVStlSGg0ZUhnOEwyRnVZV2R5WVdacFkyRlFZV2RoZEc5eVpUNEtJQ0FnSUR3dmMyOW5aMlYwZEc5UVlXZGhkRzl5WlQ0S0lDQWdJRHhsYm5SbFFtVnVaV1pwWTJsaGNtbHZQZ29nSUNBZ0lDQWdJRHhwWkdWdWRHbG1hV05oZEdsMmIxVnVhWFp2WTI5Q1pXNWxabWxqYVdGeWFXOCtDaUFnSUNBZ0lDQWdJQ0FnSUR4MGFYQnZTV1JsYm5ScFptbGpZWFJwZG05VmJtbDJiMk52UGtjOEwzUnBjRzlKWkdWdWRHbG1hV05oZEdsMmIxVnVhWFp2WTI4K0NpQWdJQ0FnSUNBZ0lDQWdJRHhqYjJScFkyVkpaR1Z1ZEdsbWFXTmhkR2wyYjFWdWFYWnZZMjgrTnpjM056YzNOemMzTnpjOEwyTnZaR2xqWlVsa1pXNTBhV1pwWTJGMGFYWnZWVzVwZG05amJ6NEtJQ0FnSUNBZ0lDQThMMmxrWlc1MGFXWnBZMkYwYVhadlZXNXBkbTlqYjBKbGJtVm1hV05wWVhKcGJ6NEtJQ0FnSUNBZ0lDQThaR1Z1YjIxcGJtRjZhVzl1WlVKbGJtVm1hV05wWVhKcGJ6NTRlSGg0ZUhnOEwyUmxibTl0YVc1aGVtbHZibVZDWlc1bFptbGphV0Z5YVc4K0NpQWdJQ0FnSUNBZ1BHbHVaR2x5YVhwNmIwSmxibVZtYVdOcFlYSnBiejU0ZUhoNGVEd3ZhVzVrYVhKcGVucHZRbVZ1WldacFkybGhjbWx2UGdvZ0lDQWdJQ0FnSUR4amFYWnBZMjlDWlc1bFptbGphV0Z5YVc4K2VIaDRlRHd2WTJsMmFXTnZRbVZ1WldacFkybGhjbWx2UGdvZ0lDQWdJQ0FnSUR4allYQkNaVzVsWm1samFXRnlhVzgrTURBd01EQThMMk5oY0VKbGJtVm1hV05wWVhKcGJ6NEtJQ0FnSUNBZ0lDQThiRzlqWVd4cGRHRkNaVzVsWm1samFXRnlhVzgrZUhoNGVEd3ZiRzlqWVd4cGRHRkNaVzVsWm1samFXRnlhVzgrQ2lBZ0lDQWdJQ0FnUEhCeWIzWnBibU5wWVVKbGJtVm1hV05wWVhKcGJ6NTRlRHd2Y0hKdmRtbHVZMmxoUW1WdVpXWnBZMmxoY21sdlBnb2dJQ0FnSUNBZ0lEeHVZWHBwYjI1bFFtVnVaV1pwWTJsaGNtbHZQbmg0UEM5dVlYcHBiMjVsUW1WdVpXWnBZMmxoY21sdlBnb2dJQ0FnUEM5bGJuUmxRbVZ1WldacFkybGhjbWx2UGdvZ0lDQWdQR1JoZEdsV1pYSnpZVzFsYm5SdlBnb2dJQ0FnSUNBZ0lEeGtZWFJoUlhObFkzVjZhVzl1WlZCaFoyRnRaVzUwYno0eU1ESTBMVEEwTFRFd1BDOWtZWFJoUlhObFkzVjZhVzl1WlZCaFoyRnRaVzUwYno0S0lDQWdJQ0FnSUNBOGFXMXdiM0owYjFSdmRHRnNaVVJoVm1WeWMyRnlaVDQ1TUM0d01Ed3ZhVzF3YjNKMGIxUnZkR0ZzWlVSaFZtVnljMkZ5WlQ0S0lDQWdJQ0FnSUNBOGRHbHdiMVpsY25OaGJXVnVkRzgrUTFBOEwzUnBjRzlXWlhKellXMWxiblJ2UGdvZ0lDQWdJQ0FnSUR4cFpHVnVkR2xtYVdOaGRHbDJiMVZ1YVhadlkyOVdaWEp6WVcxbGJuUnZQakF3TURBd01EQXdNREF3TURBd01EQXlNVHd2YVdSbGJuUnBabWxqWVhScGRtOVZibWwyYjJOdlZtVnljMkZ0Wlc1MGJ6NEtJQ0FnSUNBZ0lDQThZMjlrYVdObFEyOXVkR1Z6ZEc5UVlXZGhiV1Z1ZEc4K2REQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TWpFOEwyTnZaR2xqWlVOdmJuUmxjM1J2VUdGbllXMWxiblJ2UGdvZ0lDQWdJQ0FnSUR4bWFYSnRZVkpwWTJWMmRYUmhQakE4TDJacGNtMWhVbWxqWlhaMWRHRStDaUFnSUNBZ0lDQWdQR1JoZEdsVGFXNW5iMnh2Vm1WeWMyRnRaVzUwYno0S0lDQWdJQ0FnSUNBZ0lDQWdQR2x0Y0c5eWRHOVRhVzVuYjJ4dlZtVnljMkZ0Wlc1MGJ6NDJNQzR3TUR3dmFXMXdiM0owYjFOcGJtZHZiRzlXWlhKellXMWxiblJ2UGdvZ0lDQWdJQ0FnSUNBZ0lDQThhV0poYmtGalkzSmxaR2wwYno1SlZEQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURFOEwybGlZVzVCWTJOeVpXUnBkRzgrQ2lBZ0lDQWdJQ0FnSUNBZ0lEeGlhV05CWTJOeVpXUnBkRzgrZUhoNGVIaDRlSGc4TDJKcFkwRmpZM0psWkdsMGJ6NEtJQ0FnSUNBZ0lDQWdJQ0FnUEdOaGRYTmhiR1ZXWlhKellXMWxiblJ2UG5oNGVIaDRlSGg0ZUR3dlkyRjFjMkZzWlZabGNuTmhiV1Z1ZEc4K0NpQWdJQ0FnSUNBZ0lDQWdJRHhrWVhScFUzQmxZMmxtYVdOcFVtbHpZMjl6YzJsdmJtVStlSGg0ZUhnOEwyUmhkR2xUY0dWamFXWnBZMmxTYVhOamIzTnphVzl1WlQ0S0lDQWdJQ0FnSUNBOEwyUmhkR2xUYVc1bmIyeHZWbVZ5YzJGdFpXNTBiejRLSUNBZ0lDQWdJQ0E4WkdGMGFWTnBibWR2Ykc5V1pYSnpZVzFsYm5SdlBnb2dJQ0FnSUNBZ0lDQWdJQ0E4YVcxd2IzSjBiMU5wYm1kdmJHOVdaWEp6WVcxbGJuUnZQak13TGpBd1BDOXBiWEJ2Y25SdlUybHVaMjlzYjFabGNuTmhiV1Z1ZEc4K0NpQWdJQ0FnSUNBZ0lDQWdJRHhwWW1GdVFXTmpjbVZrYVhSdlBrbFVNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01qd3ZhV0poYmtGalkzSmxaR2wwYno0S0lDQWdJQ0FnSUNBZ0lDQWdQR0pwWTBGalkzSmxaR2wwYno1NGVIaDRlSGg0ZUR3dlltbGpRV05qY21Wa2FYUnZQZ29nSUNBZ0lDQWdJQ0FnSUNBOFkyRjFjMkZzWlZabGNuTmhiV1Z1ZEc4K2VIaDRlSGg0ZUhoNFBDOWpZWFZ6WVd4bFZtVnljMkZ0Wlc1MGJ6NEtJQ0FnSUNBZ0lDQWdJQ0FnUEdSaGRHbFRjR1ZqYVdacFkybFNhWE5qYjNOemFXOXVaVDU0ZUhoNGVEd3ZaR0YwYVZOd1pXTnBabWxqYVZKcGMyTnZjM05wYjI1bFBnb2dJQ0FnSUNBZ0lEd3ZaR0YwYVZOcGJtZHZiRzlXWlhKellXMWxiblJ2UGdvZ0lDQWdQQzlrWVhScFZtVnljMkZ0Wlc1MGJ6NEtQQzlTVUZRKzwvcnB0PgoJCQkJPC9lbGVtZW50b0xpc3RhQ2FycmVsbG9SUFQ+CgkJCTwvbGlzdGFSUFQ+CgkJCTxycm4+MDAwMDAwMDAwMDAyPC9ycm4+CgkJCTxlc2l0b1RyYW5zYXppb25lQ2FydGE+MDA8L2VzaXRvVHJhbnNhemlvbmVDYXJ0YT4KCQkJPGltcG9ydG9Ub3RhbGVQYWdhdG8+OTEuMDA8L2ltcG9ydG9Ub3RhbGVQYWdhdG8+CgkJCTx0aW1lc3RhbXBPcGVyYXppb25lPjIwMjQtMDQtMTBUMjE6MTQ6NDguOTE0KzAyOjAwPC90aW1lc3RhbXBPcGVyYXppb25lPgoJCQk8Y29kaWNlQXV0b3JpenphdGl2bz4wMDAwMDI8L2NvZGljZUF1dG9yaXp6YXRpdm8+CgkJPC9wcHQ6cHNwSW52aWFDYXJyZWxsb1JQVENhcnRlPgoJPC9zb2FwZW52OkJvZHk+Cjwvc29hcGVudjpFbnZlbG9wZT4='));
        $this->instance_3_RPT = new pspInviaCarrelloRPTCarte(base64_decode(''));
    }

    #[TestDox('getBrokerPsp()')]
    public function testGetBrokerPsp()
    {
        $this->assertEquals('88888888888', $this->instance_1_RPT->getBrokerPsp());
        $this->assertEquals('88888888888', $this->instance_2_RPT->getBrokerPsp());
        $this->assertEquals('88888888888', $this->instance_3_RPT->getBrokerPsp());

    }
    #[TestDox('getPsp()')]
    public function testGetPsp()
    {
        $this->assertEquals('PSP_TEST_01', $this->instance_1_RPT->getPsp());
        $this->assertEquals('PSP_TEST_01', $this->instance_2_RPT->getPsp());
        $this->assertEquals('PSP_TEST_01', $this->instance_3_RPT->getPsp());
    }

    #[TestDox('getStazione()')]
    public function testGetStazione()
    {
        $this->assertNull($this->instance_1_RPT->getStazione());
        $this->assertNull($this->instance_2_RPT->getStazione());
        $this->assertNull($this->instance_3_RPT->getStazione());
    }

    #[TestDox('getTransferAmount()')]
    public function testGetTransferAmount()
    {
        $this->assertEquals('90.00', $this->instance_1_RPT->getTransferAmount(0, 0));
        $this->assertNull($this->instance_1_RPT->getTransferAmount(1, 0));
        $this->assertNull($this->instance_1_RPT->getTransferAmount(0, 1));

        $this->assertEquals('60.00', $this->instance_2_RPT->getTransferAmount(0, 0));
        $this->assertEquals('30.00', $this->instance_2_RPT->getTransferAmount(1, 0));

        $this->assertNull($this->instance_2_RPT->getTransferAmount(0,1));
        $this->assertNull($this->instance_2_RPT->getTransferAmount(1,1));


        $this->assertEquals('160.00', $this->instance_3_RPT->getTransferAmount(0, 0));
        $this->assertEquals('20.00', $this->instance_3_RPT->getTransferAmount(1, 0));

        $this->assertEquals('100.00', $this->instance_3_RPT->getTransferAmount(0, 1));
        $this->assertEquals('80.00', $this->instance_3_RPT->getTransferAmount(1, 1));

        $this->assertNull($this->instance_2_RPT->getTransferAmount(0,2));
        $this->assertNull($this->instance_2_RPT->getTransferAmount(1,2));



    }


    #[TestDox('getNoticeNumber()')]
    public function testGetNoticeNumber()
    {
        $this->assertNull($this->instance_1_RPT->getNoticeNumber());
        $this->assertNull($this->instance_2_RPT->getNoticeNumber());
        $this->assertNull($this->instance_3_RPT->getNoticeNumber());
    }

    #[TestDox('getCcp()')]
    public function testGetCcp()
    {
        $this->assertEquals('t0000000000000000000000000000000020', $this->instance_1_RPT->getCcp(0));
        $this->assertNull($this->instance_1_RPT->getCcp(1));

        $this->assertEquals('t0000000000000000000000000000000021', $this->instance_2_RPT->getCcp(0));
        $this->assertNull($this->instance_2_RPT->getCcp(1));

        $this->assertEquals('t0000000000000000000000000000000022', $this->instance_3_RPT->getCcp(0));
        $this->assertEquals('t0000000000000000000000000000000022', $this->instance_3_RPT->getCcp(1));
        $this->assertNull($this->instance_3_RPT->getCcp(2));
    }

    #[TestDox('getImportoTotale()')]
    public function testGetImportoTotale()
    {
        $this->assertEquals('90.00', $this->instance_1_RPT->getImportoTotale());
        $this->assertEquals('90.00', $this->instance_2_RPT->getImportoTotale());
        $this->assertEquals('360.00', $this->instance_3_RPT->getImportoTotale());
    }

    #[TestDox('getIuv()')]
    public function testGetIuv()
    {
        $this->assertEquals('000000000000000020', $this->instance_1_RPT->getIuv(0));
        $this->assertNull($this->instance_1_RPT->getIuv(1));

        $this->assertEquals('000000000000000021', $this->instance_2_RPT->getIuv(0));
        $this->assertNull($this->instance_2_RPT->getIuv(1));

        $this->assertEquals('000000000000000022', $this->instance_3_RPT->getIuv(0));
        $this->assertEquals('000000000000000023', $this->instance_3_RPT->getIuv(1));
        $this->assertNull($this->instance_3_RPT->getIuv(2));

    }

    #[TestDox('getCcps()')]
    public function testGetCcps()
    {
        $this->assertEquals(['t0000000000000000000000000000000020'], $this->instance_1_RPT->getCcps());
        $this->assertEquals(['t0000000000000000000000000000000021'], $this->instance_2_RPT->getCcps());
        $this->assertEquals(['t0000000000000000000000000000000022', 't0000000000000000000000000000000022'], $this->instance_3_RPT->getCcps());
    }

    #[TestDox('getCanale()')]
    public function testGetCanale()
    {
        $this->assertEquals('88888888888_01', $this->instance_1_RPT->getCanale());
        $this->assertEquals('88888888888_01', $this->instance_2_RPT->getCanale());
        $this->assertEquals('88888888888_01', $this->instance_3_RPT->getCanale());
    }

    #[TestDox('isBollo()')]
    public function testIsBollo()
    {
        $this->assertFalse($this->instance_1_RPT->isBollo(0, 0));
        $this->assertFalse($this->instance_1_RPT->isBollo(0, 1));
        $this->assertFalse($this->instance_1_RPT->isBollo(1, 0));
        $this->assertFalse($this->instance_1_RPT->isBollo(1, 1));

        $this->assertFalse($this->instance_2_RPT->isBollo(0, 0));
        $this->assertFalse($this->instance_2_RPT->isBollo(0, 1));
        $this->assertFalse($this->instance_2_RPT->isBollo(1, 0));
        $this->assertFalse($this->instance_2_RPT->isBollo(1, 1));

        $this->assertFalse($this->instance_3_RPT->isBollo(0, 0));
        $this->assertFalse($this->instance_3_RPT->isBollo(0, 1));
        $this->assertFalse($this->instance_3_RPT->isBollo(1, 0));
        $this->assertFalse($this->instance_3_RPT->isBollo(1, 1));

    }

    #[TestDox('isBollo()')]
    public function testGetPaymentsCount()
    {
        $this->assertEquals(1, $this->instance_1_RPT->getPaymentsCount());
        $this->assertEquals(1, $this->instance_2_RPT->getPaymentsCount());
        $this->assertEquals(2, $this->instance_3_RPT->getPaymentsCount());
    }

    #[TestDox('getAllNoticesNumbers()')]
    public function testGetAllNoticesNumbers()
    {
        $this->assertNull($this->instance_1_RPT->getAllNoticesNumbers());
        $this->assertNull($this->instance_2_RPT->getAllNoticesNumbers());
        $this->assertNull($this->instance_3_RPT->getAllNoticesNumbers());
    }

    #[TestDox('outcome()')]
    public function testOutcome()
    {
        $this->assertNull($this->instance_1_RPT->outcome());
        $this->assertNull($this->instance_2_RPT->outcome());
        $this->assertNull($this->instance_3_RPT->outcome());
    }

    #[TestDox('getBrokerPa()')]
    public function testGetBrokerPa()
    {
        $this->assertNull($this->instance_1_RPT->getBrokerPa());
        $this->assertNull($this->instance_2_RPT->getBrokerPa());
        $this->assertNull($this->instance_3_RPT->getBrokerPa());
    }

    #[TestDox('getTransferId()')]
    public function testGetTransferId()
    {
        $this->assertNull($this->instance_1_RPT->getTransferId(0, 0));
        $this->assertNull($this->instance_1_RPT->getTransferId(0, 1));
        $this->assertNull($this->instance_1_RPT->getTransferId(1, 0));
        $this->assertNull($this->instance_1_RPT->getTransferId(1, 1));

        $this->assertNull($this->instance_2_RPT->getTransferId(0, 0));
        $this->assertNull($this->instance_2_RPT->getTransferId(0, 1));
        $this->assertNull($this->instance_2_RPT->getTransferId(1, 0));
        $this->assertNull($this->instance_2_RPT->getTransferId(1, 1));

        $this->assertNull($this->instance_3_RPT->getTransferId(0, 0));
        $this->assertNull($this->instance_3_RPT->getTransferId(0, 1));
        $this->assertNull($this->instance_3_RPT->getTransferId(1, 0));
        $this->assertNull($this->instance_3_RPT->getTransferId(1, 1));

        $this->assertNull($this->instance_3_RPT->getTransferId(2, 0));
        $this->assertNull($this->instance_3_RPT->getTransferId(2, 1));

    }

    #[TestDox('getTransferMetaDataKey()')]
    public function testGetTransferMetaDataKey()
    {
        $this->assertNull($this->instance_1_RPT->getTransferMetaDataKey(0, 0, 0));
        $this->assertNull($this->instance_1_RPT->getTransferMetaDataKey(0, 0, 1));
        $this->assertNull($this->instance_1_RPT->getTransferMetaDataKey(0, 0, 2));

        $this->assertNull($this->instance_1_RPT->getTransferMetaDataKey(1, 0, 0));
        $this->assertNull($this->instance_1_RPT->getTransferMetaDataKey(1, 0, 1));
        $this->assertNull($this->instance_1_RPT->getTransferMetaDataKey(1, 0, 2));

        $this->assertNull($this->instance_1_RPT->getTransferMetaDataKey(0, 1, 0));
        $this->assertNull($this->instance_1_RPT->getTransferMetaDataKey(0, 1, 1));
        $this->assertNull($this->instance_1_RPT->getTransferMetaDataKey(0, 1, 2));

        $this->assertNull($this->instance_2_RPT->getTransferMetaDataKey(0, 0, 0));
        $this->assertNull($this->instance_2_RPT->getTransferMetaDataKey(0, 0, 1));
        $this->assertNull($this->instance_2_RPT->getTransferMetaDataKey(0, 0, 2));

        $this->assertNull($this->instance_2_RPT->getTransferMetaDataKey(1, 0, 0));
        $this->assertNull($this->instance_2_RPT->getTransferMetaDataKey(1, 0, 1));
        $this->assertNull($this->instance_2_RPT->getTransferMetaDataKey(1, 0, 2));

        $this->assertNull($this->instance_2_RPT->getTransferMetaDataKey(0, 1, 0));
        $this->assertNull($this->instance_2_RPT->getTransferMetaDataKey(0, 1, 1));
        $this->assertNull($this->instance_2_RPT->getTransferMetaDataKey(0, 1, 2));

        $this->assertNull($this->instance_3_RPT->getTransferMetaDataKey(0, 0, 0));
        $this->assertNull($this->instance_3_RPT->getTransferMetaDataKey(0, 0, 1));
        $this->assertNull($this->instance_3_RPT->getTransferMetaDataKey(0, 0, 2));

        $this->assertNull($this->instance_3_RPT->getTransferMetaDataKey(1, 0, 0));
        $this->assertNull($this->instance_3_RPT->getTransferMetaDataKey(1, 0, 1));
        $this->assertNull($this->instance_3_RPT->getTransferMetaDataKey(1, 0, 2));

        $this->assertNull($this->instance_3_RPT->getTransferMetaDataKey(0, 1, 0));
        $this->assertNull($this->instance_3_RPT->getTransferMetaDataKey(0, 1, 1));
        $this->assertNull($this->instance_3_RPT->getTransferMetaDataKey(0, 1, 2));

    }

    #[TestDox('getTransferPa()')]
    public function testGetTransferPa()
    {
        $this->assertEquals('77777777777', $this->instance_1_RPT->getTransferPa(0, 0));

        $this->assertEquals('77777777777', $this->instance_2_RPT->getTransferPa(0, 0));
        $this->assertEquals('77777777777', $this->instance_2_RPT->getTransferPa(1, 0));

        $this->assertEquals('77777777777', $this->instance_3_RPT->getTransferPa(0, 0));
        $this->assertEquals('77777777777', $this->instance_3_RPT->getTransferPa(1, 0));

        $this->assertEquals('77777777777', $this->instance_3_RPT->getTransferPa(0, 1));
        $this->assertEquals('77777777777', $this->instance_3_RPT->getTransferPa(1, 1));

        $this->assertNull($this->instance_1_RPT->getTransferPa(1, 0));
        $this->assertNull($this->instance_1_RPT->getTransferPa(0, 1));

        $this->assertNull($this->instance_2_RPT->getTransferPa(2, 0));
        $this->assertNull($this->instance_2_RPT->getTransferPa(0, 1));

        $this->assertNull($this->instance_3_RPT->getTransferPa(2, 0));
        $this->assertNull($this->instance_3_RPT->getTransferPa(2, 1));

    }

    #[TestDox('getPaymentMetaDataValue()')]
    public function testGetPaymentMetaDataValue()
    {
        $this->assertNull($this->instance_1_RPT->getPaymentMetaDataValue(0, 0));
        $this->assertNull($this->instance_1_RPT->getPaymentMetaDataValue(0, 1));
        $this->assertNull($this->instance_1_RPT->getPaymentMetaDataValue(1, 0));
        $this->assertNull($this->instance_1_RPT->getPaymentMetaDataValue(1, 1));

        $this->assertNull($this->instance_2_RPT->getPaymentMetaDataValue(0, 0));
        $this->assertNull($this->instance_2_RPT->getPaymentMetaDataValue(0, 1));
        $this->assertNull($this->instance_2_RPT->getPaymentMetaDataValue(1, 0));
        $this->assertNull($this->instance_2_RPT->getPaymentMetaDataValue(1, 1));

        $this->assertNull($this->instance_3_RPT->getPaymentMetaDataValue(0, 0));
        $this->assertNull($this->instance_3_RPT->getPaymentMetaDataValue(0, 1));
        $this->assertNull($this->instance_3_RPT->getPaymentMetaDataValue(1, 0));
        $this->assertNull($this->instance_3_RPT->getPaymentMetaDataValue(1, 1));

    }

    #[TestDox('getIuvs()')]
    public function testGetIuvs()
    {
        $this->assertEquals(['000000000000000020'], $this->instance_1_RPT->getIuvs());
        $this->assertEquals(['000000000000000021'], $this->instance_2_RPT->getIuvs());
        $this->assertEquals(['000000000000000022', '000000000000000023'], $this->instance_3_RPT->getIuvs());
    }

    #[TestDox('getTransferCount()')]
    public function testGetTransferCount()
    {
        $this->assertEquals(1, $this->instance_1_RPT->getTransferCount(0));
        $this->assertNull($this->instance_1_RPT->getTransferCount(1));

        $this->assertEquals(2, $this->instance_2_RPT->getTransferCount(0));
        $this->assertNull($this->instance_2_RPT->getTransferCount(1));

        $this->assertEquals(2, $this->instance_3_RPT->getTransferCount(0));
        $this->assertEquals(2, $this->instance_3_RPT->getTransferCount(1));
        $this->assertNull($this->instance_3_RPT->getTransferCount(2));
    }
    #[TestDox('getTransferIban()')]
    public function testGetTransferIban()
    {
        $this->assertEquals('IT0000000000000000000000001', $this->instance_1_RPT->getTransferIban(0, 0));
        $this->assertNull($this->instance_1_RPT->getTransferIban(1, 0));
        $this->assertNull($this->instance_1_RPT->getTransferIban(0, 1));

        $this->assertEquals('IT0000000000000000000000001', $this->instance_2_RPT->getTransferIban(0, 0));
        $this->assertEquals('IT0000000000000000000000002', $this->instance_2_RPT->getTransferIban(1, 0));
        $this->assertNull($this->instance_2_RPT->getTransferIban(2,0));
        $this->assertNull($this->instance_2_RPT->getTransferIban(0,1));

        $this->assertEquals('IT0000000000000000000000001', $this->instance_3_RPT->getTransferIban(0, 0));
        $this->assertEquals('IT0000000000000000000000002', $this->instance_3_RPT->getTransferIban(1, 0));
        $this->assertEquals('IT0000000000000000000000001', $this->instance_3_RPT->getTransferIban(0, 1));
        $this->assertEquals('IT0000000000000000000000002', $this->instance_3_RPT->getTransferIban(1, 1));
        $this->assertNull($this->instance_3_RPT->getTransferIban(2, 0));
        $this->assertNull($this->instance_3_RPT->getTransferIban(2, 1));
        $this->assertNull($this->instance_3_RPT->getTransferIban(0, 2));

    }

    #[TestDox('getTransferMetaDataValue()')]
    public function testGetTransferMetaDataValue()
    {
        $this->assertNull($this->instance_1_RPT->getTransferMetaDataValue(0, 0, 0));
        $this->assertNull($this->instance_1_RPT->getTransferMetaDataValue(0, 0, 1));
        $this->assertNull($this->instance_1_RPT->getTransferMetaDataValue(0, 0, 2));

        $this->assertNull($this->instance_1_RPT->getTransferMetaDataValue(1, 0, 0));
        $this->assertNull($this->instance_1_RPT->getTransferMetaDataValue(1, 0, 1));
        $this->assertNull($this->instance_1_RPT->getTransferMetaDataValue(1, 0, 2));

        $this->assertNull($this->instance_1_RPT->getTransferMetaDataValue(0, 1, 0));
        $this->assertNull($this->instance_1_RPT->getTransferMetaDataValue(0, 1, 1));
        $this->assertNull($this->instance_1_RPT->getTransferMetaDataValue(0, 1, 2));

        $this->assertNull($this->instance_2_RPT->getTransferMetaDataValue(0, 0, 0));
        $this->assertNull($this->instance_2_RPT->getTransferMetaDataValue(0, 0, 1));
        $this->assertNull($this->instance_2_RPT->getTransferMetaDataValue(0, 0, 2));

        $this->assertNull($this->instance_2_RPT->getTransferMetaDataValue(1, 0, 0));
        $this->assertNull($this->instance_2_RPT->getTransferMetaDataValue(1, 0, 1));
        $this->assertNull($this->instance_2_RPT->getTransferMetaDataValue(1, 0, 2));

        $this->assertNull($this->instance_2_RPT->getTransferMetaDataValue(0, 1, 0));
        $this->assertNull($this->instance_2_RPT->getTransferMetaDataValue(0, 1, 1));
        $this->assertNull($this->instance_2_RPT->getTransferMetaDataValue(0, 1, 2));

        $this->assertNull($this->instance_3_RPT->getTransferMetaDataValue(0, 0, 0));
        $this->assertNull($this->instance_3_RPT->getTransferMetaDataValue(0, 0, 1));
        $this->assertNull($this->instance_3_RPT->getTransferMetaDataValue(0, 0, 2));

        $this->assertNull($this->instance_3_RPT->getTransferMetaDataValue(1, 0, 0));
        $this->assertNull($this->instance_3_RPT->getTransferMetaDataValue(1, 0, 1));
        $this->assertNull($this->instance_3_RPT->getTransferMetaDataValue(1, 0, 2));

        $this->assertNull($this->instance_3_RPT->getTransferMetaDataValue(0, 1, 0));
        $this->assertNull($this->instance_3_RPT->getTransferMetaDataValue(0, 1, 1));
        $this->assertNull($this->instance_3_RPT->getTransferMetaDataValue(0, 1, 2));
    }

    #[TestDox('getPaEmittenti()')]
    public function testGetPaEmittenti()
    {
        $this->assertEquals(['77777777777'], $this->instance_1_RPT->getPaEmittenti());
        $this->assertEquals(['77777777777'], $this->instance_2_RPT->getPaEmittenti());
        $this->assertEquals(['77777777777', '77777777777'], $this->instance_3_RPT->getPaEmittenti());
    }

    #[TestDox('getToken()')]
    public function testGetToken()
    {
        $this->assertEquals('t0000000000000000000000000000000020', $this->instance_1_RPT->getToken(0));
        $this->assertNull($this->instance_1_RPT->getToken(1));

        $this->assertEquals('t0000000000000000000000000000000021', $this->instance_2_RPT->getToken(0));
        $this->assertNull($this->instance_2_RPT->getToken(1));

        $this->assertEquals('t0000000000000000000000000000000022', $this->instance_3_RPT->getToken(0));
        $this->assertEquals('t0000000000000000000000000000000022', $this->instance_3_RPT->getToken(1));
        $this->assertNull($this->instance_3_RPT->getToken(2));
    }

    #[TestDox('getImporto()')]
    public function testGetImporto()
    {
        $this->assertEquals('90.00', $this->instance_1_RPT->getImporto(0));
        $this->assertEquals('90.00', $this->instance_2_RPT->getImporto(0));
        $this->assertEquals('180.00', $this->instance_3_RPT->getImporto(0));
        $this->assertEquals('180.00', $this->instance_3_RPT->getImporto(1));
    }

    #[TestDox('getTransferMetaDataCount()')]
    public function testGetTransferMetaDataCount()
    {
        $this->assertNull($this->instance_1_RPT->getTransferMetaDataCount(0, 0));
        $this->assertNull($this->instance_1_RPT->getTransferMetaDataCount(1, 0));
        $this->assertNull($this->instance_1_RPT->getTransferMetaDataCount(1, 0));
        $this->assertNull($this->instance_1_RPT->getTransferMetaDataCount(1, 1));

        $this->assertNull($this->instance_2_RPT->getTransferMetaDataCount(0, 0));
        $this->assertNull($this->instance_2_RPT->getTransferMetaDataCount(1, 0));
        $this->assertNull($this->instance_2_RPT->getTransferMetaDataCount(1, 0));
        $this->assertNull($this->instance_2_RPT->getTransferMetaDataCount(1, 1));

        $this->assertNull($this->instance_3_RPT->getTransferMetaDataCount(0, 0));
        $this->assertNull($this->instance_3_RPT->getTransferMetaDataCount(1, 0));
        $this->assertNull($this->instance_3_RPT->getTransferMetaDataCount(1, 0));
        $this->assertNull($this->instance_3_RPT->getTransferMetaDataCount(1, 1));
        $this->assertNull($this->instance_3_RPT->getTransferMetaDataCount(0, 2));
        $this->assertNull($this->instance_3_RPT->getTransferMetaDataCount(1, 2));
    }

    #[TestDox('getPaEmittente()')]
    public function testGetPaEmittente()
    {
        $this->assertEquals('77777777777', $this->instance_1_RPT->getPaEmittente(0));
        $this->assertEquals('77777777777', $this->instance_2_RPT->getPaEmittente(0));
        $this->assertEquals('77777777777', $this->instance_3_RPT->getPaEmittente(0));
        $this->assertEquals('77777777777', $this->instance_3_RPT->getPaEmittente(1));

        $this->assertNull($this->instance_1_RPT->getPaEmittente(1));
        $this->assertNull($this->instance_2_RPT->getPaEmittente(1));
        $this->assertNull($this->instance_3_RPT->getPaEmittente(2));

    }

    #[TestDox('getAllTokens()')]
    public function testGetAllTokens()
    {
        $this->assertEquals(['t0000000000000000000000000000000020'], $this->instance_1_RPT->getCcps());
        $this->assertEquals(['t0000000000000000000000000000000021'], $this->instance_2_RPT->getCcps());
        $this->assertEquals(['t0000000000000000000000000000000022', 't0000000000000000000000000000000022'], $this->instance_3_RPT->getCcps());
    }

    #[TestDox('getTransactionRRN()')]
    public function testGeTransactionRRN()
    {
        $this->assertEquals('000000000001', $this->instance_1_RPT->getTransactionRRN());
        $this->assertEquals('000000000002', $this->instance_2_RPT->getTransactionRRN());
        $this->assertEquals('000000000003', $this->instance_3_RPT->getTransactionRRN());
    }

    #[TestDox('getTransactionCodeAuth()')]
    public function testGetTransactionCodeAuth()
    {
        $this->assertEquals('000001', $this->instance_1_RPT->getTransactionCodeAuth());
        $this->assertEquals('000002', $this->instance_2_RPT->getTransactionCodeAuth());
        $this->assertEquals('000003', $this->instance_3_RPT->getTransactionCodeAuth());
    }

    #[TestDox('getEsitoTransazioneCarta()')]
    public function testGetEsitoTransazioneCarta()
    {
        $this->assertEquals('00', $this->instance_1_RPT->getEsitoTransazioneCarta());
        $this->assertEquals('00', $this->instance_2_RPT->getEsitoTransazioneCarta());
        $this->assertEquals('00', $this->instance_3_RPT->getEsitoTransazioneCarta());
    }

}
